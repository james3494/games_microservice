
module.exports = {
  buildGeneralDb({ makeDb, collectionName, ...extraOperations }) {
    return Object.freeze({
      findById,
      andStyleFilter,
      orStyleFilter,
      insert,
      remove,
      update,
      ...extraOperations
    });

    async function findById ({ _id }) {
      const db = await makeDb();
      const result = await db.collection(collectionName).find({ _id });
      const found = await result.toArray();
      if (found.length === 0) {
        return null;
      }
      return found[0];
    }

    async function insert ({ _id, ...info }) {
      const db = await makeDb();
      const result = await db
        .collection(collectionName)
        .insertOne({ _id, ...info });

      return result.insertedId;
    }
    async function update ({ _id, ...info }) {
      const db = await makeDb();
      const result = await db
        .collection(collectionName)
        .updateOne({ _id }, { $set: { ...info } });
      return result.modifiedCount > 0 ? { ...info } : null;
    }

    async function remove ({ _id }) {
      const db = await makeDb();
      const result = await db.collection(collectionName).deleteOne({ _id });
      return !!result.deletedCount;
    }

    // this is an 'AND' style search. It can take regex in the filters
    async function andStyleFilter ({ ...fields }) {
      const db = await makeDb();

      const result = await db.collection(collectionName).find({ ...fields });
      const found = await result.toArray();
      return found;
    }
    // this is an 'OR' style search. It can take regex in the filters
    async function orStyleFilter ({ ...fields }) {
      const db = await makeDb();
      let queryArray=[];
      Object.entries(fields).forEach(([key, value]) => {
        queryArray.push({ [key]: value });
      })
      const result = await db.collection(collectionName).find({ $or: queryArray });
      const found = await result.toArray();
      return found;
    }
  }
}
